파라미터
: 클라이언트가 서버로 요청을 보낼 시 같이 보내는 추가적인 정ㅂ
(예시) 로그인시 -> 사용자id,password
	  게시글 작성시 -> 게시글 제목, 게시글 내용
	  게시판 게시글 조회 시 -> 페이지번호, 페이지사이즈, 검색어

< 파라미터를 보내는 방법 >
http method에 따라 두가지로 분리한다.
 GET : 파라미터를 url에 붙여서 전송한다.
 POST : http body영역에 기록하여 전송한다.
 	   - 웹 브라우저 주소에 노출되지 않음
 	   - 개발자 도구를 이용하면 보는게 가능함
 	   
< HTTP프로토콜에서 데이터를 주고 받는 방식 >
HTTP(Request/Response) MESSAGE라는 정해진 포맷으로 전송한다.
 - 형식은 3가지 항목으로 구분 -
 1. Request Line : 요청메소드(get, post) , url(get방식일 경우 파라미터가 이곳에 표기) , http버전
 2. Request Header : 헤더정보(브라우저, OS정보, locale, content-type ...)
 3. Request body : 파라미터 기록(GET방식은 파라미터가 body에 담기지 않음
 
form태그
실습 목적 :  request객체를  통해서 파라미터를 받는 방법을 알려는 것
< form태그를 이용하여 파라미터와 같이 서버로 요청을 보낼 시 주의사항 >
 1. <form>태그 기술
    - 전송을 통해서 보낼 파라미터들을 form태그 하위의 input 태그를 기술함
    - name속성, value속성
 2. form태그의 action속성
    - action : 요청 보낼 서버의 자원 -> 서블릿/jsp)
 3. form태그의 method속성
    - 전송할 HTTP method 방식
    - form태그를 이용하여 전송 시 GET, POST 두 방식만 가능 

Tip!_ jQuery에서 제공하는 serialize()함수를 통해 전송될 파라미터를 미리 알 수가 있다   

< request객체를 통해 파라미터를 받는 방법 >
 1. 하나의 파라미터로 여러개의 값이 전송 될 수 있음
 2. java servlet 표준 스펙에서는 파라미터를 웹객체를 통해 관리함
    - Map<String, Stringp[]>
    - 파라미터 이름이 map의 key가 되고, 파라미터 값들의 map의 value가 됨
 3. request 객체를 통해서 파라미터를 조회 할 수는 있지만
    신규로 추가하거나 변경할 수는 없음 
    - wrapper클래스를 이용하여 비슷한 효과를 만들어 낼 수는 있음(filter학습시 진행예정)

< request객체에서 제공하는 파라미터 관련 메소드 >
 1. string getParameter(String parameterName) 
   : 파라미터이름에 해당하는 파라미터 값을 조회함. 
     (즉, 파라미터값이 여러개 존재할 경우 가장 첫번째 값을 반환)
 2. String[] getParameterValues(String parameterName)
   : 파라미터이름에 해당하는 모든 파라미터값을 문자열 배열로 반환
 3. Enumeration<String> getParameterNames()
   : 해당 요청에 포함되어 있는 파라미터 이름을 조회
 4. Map<String, String[]> getParameterMap() 
   : 요청 파라미터가 담긴 맵을 반환


* 서버기동 *
- 서버 기동이된 상태에서 새로운 서블릿을 생성할 경우 해당 서블릿을 서버가 인식하지 못함
  -> 재기동이 반드시 필요
- 서버 기동시 서블릿의 경우 수정을 하면 서버가 수정내역을 리로드하면서 바로 반영됨
  -> 재기동 필요 없음
- web.xml 혹은 server 설정정보를 수정한 경우 수정내역을 반영하기 위해 
  -> 재기동이 반드시 필요


HttpServletResponse
 - 서버가 클라이언트로 보내는 응답에 포함되는 정보를 캡슐화(은닉화)하여 보관하는 객체
 - client에게 요청처리를 전달하는 객체

엑셀 파일 다운로드
 (1 방법). JSP로 엑셀 파일을 만들어 내는 형태 (.xls 포맷만 가능)  <- 오늘 실습 
 (2 방법). 라이브러리 활용(apache - poi : 엑셀파일을 조회/생성)  <- Spring할 때 실습예정
          -> 2방법의 단점 손이 많이 가는 형태임
          
          

 