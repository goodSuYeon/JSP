하나의 서버에 복수의 웹 애플리케이션을 기동하는 경우에
발생할 수 있는 url충돌

1번. 첫번째 웹 애플리케이션 : 수업시간에 진행하는 jsp 프로젝트, 컨텍스트 패스: /
	webapp/jsp/basic.jsp
	-> localhost/jsp/basic.jsp

2번. 두번째 웹 애플리케이션 : 신규 프로젝트(jsp2) 생성, 컨텍스트 패스 : /jsp 
	webapp/basic.jsp
	-> localhost/jsp/basic.jsp
          
다른 프로젝트 내에서 2번을 실행했을 경우에,
1번이 실행되는지 아니면 에러가 뜨는지 확인하기
 결과 --> 2번 페이지가 뜬다 
 왜? --> contextPath가 먼저 적용되어 두번째 웹 애플리케이션에서 응답을 생성한 것을 확인할 수 있다
 	    클라이언트 입장에서는 url만 보고  contextPath인지 일반 폴더를 가리키는 경로인지 판단할 수는 없다.
 	    
< JSP 기본 객체 >
스크립틀릿에서 별도로 선언없이 사용할 수 있는, 미리 선언되어 있는 객체
JSP파일이 servlet으로 변환되는 과정(서버가 변환)에서 선언 되어 있는 것을 확인 할 수 있다.
-> work폴더에서 확인 가능

 - pageContext : 		4개의 scope에 접근할 수 있는 객체
  (type:PageContext)	getAttribute , setAttribute, 
			    		findAttribute() (pageContext => request => session => application)
			  
			    		jsp에 선언된 다른 내장객체를 관리
			            getPage(), getRequest(), getSession(), getServletContext() 

 - request : (scope) 소멸시점 -> 응답이 생성된 이후
  (type:HttpServletRequest)
  
 - session : 			 서버의 사용자별로 할당되는 공간, 사용자를 식별하기 위해 사용(cookie-session)
  (type:HttpSession)	 소멸시점 -> 특정시간이 지난 후(서버에 설정된 시간만큼 서버로 요청을 안보내면 소멸)
	          			 또는, 강제로 삭제 가능(session.invalidate())
	          
 - application : 		 서버 메모리에 할당되는 공간, 서버에 하나만 존재하는 공간
  (type:ServletContext)  web.xml에 설정한 초기화 파라미터 정보를 얻어올 수 있음 
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
- page : jsp페이지 객체(인스턴스)를 의미  _jspService()

- config : 서블릿 컨테이너가 서블릿 초기화시 사용하는 설정을 저장한 객체
		   servlet의 init 메소드의 인자로 전달된다
		   
- out : 응답생성을 위한 출력객체
	    servlet.getWriter() -> PrintWriter type객체 반환, PrintWriter객체와 유사함
	    jsp에서 문자열을 생성하기 위해 표현식을 사용한다
	    자바의 반복문을 사용하여 표현식을 사용하기 위해서는 다음과 같은 형태로 코드를 작성한다
	    
	    <% for(int i=0; i<10; i++){ %>
	    	<%= i %>
	    <% } %>
	    
	    스크립틀릿과 표현식의 구분 표기 <% , <%= 을 열고 닫는 부분으로 코드 가독성이 떨어진다
	    out 객체를 이용하면 표현식을 사용하지 않고도 문자를 출력할 수 있다 
	    
	    <% for(int i=0; i<10; i++){
 			out.write(i);
	 	} %>	     		  
