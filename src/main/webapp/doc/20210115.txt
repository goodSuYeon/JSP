Model1 : 요청을 jsp가 함수, 응답도 jsp에서 생성
	     비지니스 로직이 jsp(view)안에서 호출함
	     만약, 
	     <다른 jsp(view)에서도 동일한 비지니스 로직(model)을 사용 할 경우>
	     비지니스 로직의 변경 시 많은 코드 수정이 동반된다.
	 	 -> 유지보수의 어려움
	     
Model2 : - 사용자의 요청을 Servlet이 받음
		 - Servlet은 요청을 받아 View로 보여줄것인지 / Model로 보내줄것인지 정하여 전송함
    	   (View는 사용자에게 보여주는 역할만 담당하고 실질적인 기능부분은 Model에서 담당)

<Model1 / Model2의 차이점>
 View와 Controller의 분할여부의 차이
 Model1 : View와 Controller가 하나의 JSP페이지로 작성되는 형태
 Model2 : 서블릿으로 요청을 받아서 알맞게 처리한 후에 JSP페이지로 포워딩하는 형태
 
<Model1 / Model2의 장점>
 Model1 : 빠르고 쉽게 개발할 수 있다.
 Model2 : View와 Controller를 분리하는 방식으로, 디자이너와 개발자의 분업이 가능하며 
          유지보수에 유리하다.
 
<MVC패턴>
Model - View - Controller
 - Controller : 요청을 접수, 비지니스 로직을 호출 및 저장(scope)
 - Model : 비지니스  로직 처리
 - View  : 화면 출력을 담당
 
 - 각 역할을 담당하는 객체를 분리
 - model1과 다르게 View의 model1을 분리
 - View에서 필요한 데이터는 scope객체를 통해서 받는다.
 
<Front Controller>
 : 모든 요청을 하나의 객체가 접수 받는 형태
 
<Front Controller장점>
 - 모든 요청(Request)을 하나의 컨트롤러를 통해 받으므로 한 곳에서 모든 작업을 처리할 수 있다.
 - 추적(Tracking)이나 보안(Security)을 적용할 때 하나의 컨트롤러에만 적용하면 된다.
 - 파일 구조가 바뀌어도 URL을 유지할 수 있다.
 
<EL (Expression Language)> 
: JSP의 기본 문법을 보완하는 기능의 스크립트언어로, 데이터를 표현하기 위한 언어이다

<EL에서 제공해주는 것 ?>
 - JSP 기본 객체 영역의 속성을 쉽게 접근(page, request, session, application)
 - 집합 객체에 대한 접근방법(vo,map,list) 제공
 - 수치 연산, 관계 연산, 논리 연산자 제공
 - 자바 클래스 메서드 호출 기능 (커스텀 태그) 제공
 - EL언어의 기본 객체 제공
 
<JSP 내장객체 (9가지)>
 - request	    : 클라이언트의 HTTP요청 정보를 저장
 - response     : HTTP요청에 대한 응답정보를 저장 
 - pageContext  : jsp 페이지에 대한 정보
 - session      : 클라이언트가 서버에 접속했을 때 HTTP 세션 정보 저장
 - application  : 웹어플리케이션에 대한 Context의 정보 저장
 - out          : jsp 결과 페이지 출력 스트림
 - config       : jsp 페이지 설정 정보 저장
 - page         : jsp 페이지를 구현한 자바 클래스 객체
 - exception    : 예외 처리를 위한 객체
 
  	    
